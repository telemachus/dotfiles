# package {main}
snippet pkg "package {main}" b
	package ${1:main}$0
# shorthand variable declaration
snippet : "v := value" b
	$1 := $0
# full variable declaration
snippet var "var name type = expression" b
	var ${1:name} = ${2:exp}
# var ( ... )
snippet vars "var ( ... )" b
	var (
		${1:name} = ${2:exp}
	)
# defer
snippet df "defer someFunction()"
	defer ${1:func}(${2}) b
snippet fmt "import fmt" b
	import "fmt"
# import
snippet import "import ( ... )" b
	import (
		"$1"
	)
# condition-only for loop (i.e., a while loop)
snippet while "for condition { ... }" b
	for ${1:condition} {
		${2:${TM_SELECTED_TEXT:// body}}
	}
# three-part for loop
snippet fori "for i := 0; i < N; i++ { ... }" b
	for ${1:i} := ${2:0}; ${3:$1} ${4:<} ${5:N}; ${6:$1++} {
		${7:${TM_SELECTED_TEXT:// body}}
	}

# three-part for loop with two variables
snippet forij "for i,j := 0, N; i < N; i, j = x, y { ... }" b
	for ${1:i}, ${3:j} := ${2:0}, ${4:0}; ${6:$1} ${5:<} ${7:N}; ${8:$1}, ${9:$3} = ${10:$1+1}, ${11:$3-1} {
		${12:${TM_SELECTED_TEXT:// body}}
	}
# for range loop
snippet forr "for index, value := range items { ... }" b
	for ${2:index}, ${3:value} := range ${1} {
		${4:${TM_SELECTED_TEXT:// body}}
	}
# infinite for loop (i.e., while true)
snippet forever "for { ... }" b
	for {
		$1
	}
# map
snippet map "map[Type]Type"
	map[${1:string}]${2:int}
# main()
snippet mn "func main() { ... }" b
	func main() {
		${1:$TM_SELECTED_TEXT}
	}$0
snippet con "single constant declaration" b
	const ${1:name} = ${2:value}
snippet cons "multiple constants declaration" b
	const (
		${1:constant} = ${2:value}
	)
snippet interface "interface declaration" b
	type ${1:name} interface {
		$2
	}
snippet iota "iota constant generator" b
	const (
		${1:constant} ${2:type} = iota
	)
snippet if "if statement" b
	if ${1:condition} {
		${2:${TM_SELECTED_TEXT:// body}}
	}
snippet switch "switch statement" b
	switch ${1:expression} {
	case $2
	}
snippet struct "struct declaration" b
	type ${1:name} struct {
		$2
	}
# define a function
snippet func "func name(...) [error] { ... }" b
	func ${1:name}(${2}) ${3} {
		${4:${TM_SELECTED_TEXT:// body}}
	}
# define a method
snippet meth "func (self Type) Method(...) [error] { ... }" b
	func (${1:receiver} ${2:type}) ${3:name}(${4:params}) ${5} {
		${6:${TM_SELECTED_TEXT:// body}}
	}
# assign an anonymous function to a variable
# (I need a better name here, but this is brief.)
snippet anon "name := func(...) [error] { ... }"
	${1:name} := func(${2:params}) ${3:returns} {
		${4:${TM_SELECTED_TEXT:// body}}
	}
# error handling
snippet err "simple error handling" b
	if err != nil {
		${1:FIXME}
	}
# if with inline error
snippet ife "if with inline error"
	if err := ${1:condition}; err != nil {
		$2
	}
# if with inline error and t.Fatalf
snippet iferrtf "if err: = <something>; err != nil { t.Fatalf }"
	if err := ${1:condition}; err != nil {
		t.Fatalf(${2})
	}
# init()
snippet init "func init() { ... }" b
	func init() {
		$1
	}
# t.Error("message")
snippet terr "t.Error(...)" b
	t.Error("${1:message}")
# t.Errorf("message", args,...)
snippet terrf "t.Errorf(...)" b
	t.Errorf("${1:message}", ${2:args,...})
# t.Fatal("message")
snippet tfat "t.Fatal(...)" b
	t.Fatal("${1:message}")
# t.Fatalf("message", args,...)
snippet tfatf "t.Fatalf(...)" b
	t.Fatalf("${1:message}", ${2:args,...})
# test function
snippet test "func TestXYZ(t *testing.T) { ... }"
	func Test${1:Something}(t *testing.T) {
		t.Parallel()
		$2
	}
# write a helper function for tests
snippet testHelper "func Name(t testing.TB) { ... }"
	func ${1:name}(t testing.TB) {
		${2:t.Helper()}
		${3:code}
	}
# create a map[string]struct of test cases
snippet testCases "testCases := map[string]struct{ ... }{ ... }" b
	${1:testCases} := map[string]struct {
		${2:field} ${3:type}
	}{
		${4:message}: {${5:struct}},
	}
# compare want and got using cmp.Diff
snippet cmpDiff "if diff := cmp.Diff(want, got)..." b
	if diff := cmp.Diff(${1:want}, ${2:got}); diff != "" {
		t.Errorf("${3:funcSig} mismatch(-${4:$1}, +${5:$2}):\n%s", diff)
	}
# call t.Run with an anonymous function
snippet trun "t.Run(message, func(t *testing.T) { ... })"
	t.Run(${1:"${2:message}"}, func(t *testing.T) {
		t.Parallel()
		${3:${TM_SELECTED_TEXT:// body}}
	})
# call t.Run with a named function
snippet trunn "t.Run(message, functionName)"
	t.Run(${1:"${2:message}"}, ${3:funcName})${0}
# benchmark function
snippet bench "func BenchmarkXYZ(b *testing.B) { ... }"
	func Benchmark${1:Something}(b *testing.B) {
		for i := 0; i < b.N; i++ {
			$2
		}
	}
# got != want
snippet gotwant "if got != want { t.Errorf(...) }"
	if ${1:got} != ${2:want} {
		t.Errorf("${3:Function() = [%+v]}; want %${4:[%+v]}", ${1:got}, ${2:want})
	}
# do something when a key is present in a map
snippet ok "if <key>, ok := <map>[<value>]; ok { ... }"
	if ${1:key}, ok := ${2:map}[${3:value}]; ok {
		${4}
	}
# do something when a key is not present in a map
snippet nok "if <key>, ok := <map>[<value>]; !ok { ... }"
	if ${1:key}, ok := ${2:map}[${3:value}]; !ok {
		${4}
	}
# reminder for Go's reference time
snippet timeref "// 01/02 03:04:05PM '06 -0700" b
	// Reference time: 01/02 03:04:05PM '06 -0700, aka January 2, 15:04:05, 2006
# ymd for Go's reference time
snippet ymd "ymd for Go" w
	"20060102"
# y-m-d for Go's reference time
snippet y-m-d "YYYY-MM-DD for Go" w
	"2006-01-02"
# vim:ft=snippets:
