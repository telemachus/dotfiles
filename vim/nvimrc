execute pathogen#infect()
execute pathogen#helptags()

syntax on
filetype plugin indent on
set bs=indent,eol,start
set history=500
set scrolloff=0             " No breathing room
set number
set mouse=		    " No mouse capture

set ruler                   " Show the cursor position all the time
set showcmd
set showmode
set ls=2                    " Always show status bar

" This is no longer necessary in neovim.
" runtime macros/matchit.vim
let g:match_paren_insert_timeout=5

let g:is_posix = 1
if &shell =~# 'fish$'
    set shell=bash
endif

set wrap linebreak
set colorcolumn=78
set autoindent
set formatoptions=tcqn1
set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab
set number
set foldmarker={{{,}}}
set foldlevel=0
set foldmethod=marker

set listchars=tab:▸\ ,trail:·,eol:¬
set list

" set termencoding=utf-8
set encoding=utf-8
set laststatus=2            " Always put a status line in, even
                            " if there is only one window
set showtabline=2           " Show a tabbar on top, always

set ignorecase
set smartcase               " Only care about case if I enter capitals
set gdefault                " Subsitutions are global ('g') by default
set incsearch               " Do incremental searching
set hlsearch                " Highlight all matches in a search
set conceallevel=0

" Make sure neovim knows where to find python
let g:python3_host_prog = '/usr/local/bin/python3'

set backup
set backupdir=$HOME/.nvim_backups,/tmp
set directory=/tmp,$HOME/.nvim_backups

set undofile
set undodir=$HOME/.nvim_undo,/tmp

set grepprg=ack\ --nogroup\ --column
set grepformat=%f:%l:%c:%m

set printoptions:paper:letter,header:0,syntax:n
set printfont:Consolas

set hidden
set title
set shortmess=atIF

set statusline=[%<%.20f][%{&fenc==''?&enc:&fenc}]%y%m%r%h
set statusline+=%=%([Line:\ %l\ Column:\ %c\ %P]%)

" mapleader
let mapleader = ","
" Quickly remove highlighting
nnoremap <silent> <leader><space> :noh<cr>

" Indent pastes properly
nnoremap <silent> <leader>cp :set paste<cr>"*p`[v`]=:set nopaste<cr><esc>
nnoremap <silent> <leader>pi p`[v`]=

nnoremap <silent> <leader>sp :call SpaceOutParens()<cr>

nnoremap Q gq
vnoremap Q gq
" Seriously, why did I do this?
" '{mark} jumps to start of line with {mark}.
" `{mark} goes to the line and column where {mark} is set.
" I guess I thought I would want the `{mark} behavior more often than '{mark}?
" Joke is on me: I almost never use marks!
" nnoremap ' `
" nnoremap ` '
nnoremap <silent><leader>l :set list!<CR>
nnoremap <leader>m :.,/^-- / - d

" From Practical Vim (ed. 2, page 101)
"
" Use %% to get current buffer's directory for :edit, :write, :saveas, :read
" and :find.
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'

" A mapping for the :w !sudo tee % > /dev/null trick
cnoremap w!! w !sudo tee % > /dev/null

" Use bash-style tab completion: (1) tab shows longest common string and (2)
" list all choices after that.
set wildmode=longest,list

" Define an empty augroup, so that I only have to run autocmd! once.
augroup vim_config
  autocmd!
augroup END

" My header files are C, not C++
autocmd vim_config BufNewFile,BufNew,BufRead *.h setlocal filetype=c

" Close folds when opeing LaTeX files.
"autocmd vim_config BufNewFile,BufNew *.tex :normal zM

" Git rebase bindings from
" http://www.blaulabs.de/2012/12/19/hidden-gems-in-vimruntime/
autocmd vim_config FileType gitrebase call LoadGitrebaseBindings()

fun! LoadGitrebaseBindings()
    nnoremap P :Pick
    nnoremap S :Squash
    nnoremap C :Cycle
endfun

" From tpope's unimpaired.vim via *Practical Vim*
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>
nnoremap <silent> [t :tabprevious<CR>
nnoremap <silent> ]t :tabnext<CR>
nnoremap <silent> [T :tabfirst<CR>
nnoremap <silent> ]T :tablast<CR>

autocmd vim_config BufNewFile,BufNew,BufRead *.rockspec
\   setlocal filetype=lua

let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

let g:gist_clip_command='pbcopy'
let g:gist_show_privates = 1
let g:gist_detect_filetype = 1
let g:github_user = 'telemachus'

" Uncomment this if I want files to open with all folds closed.
" let g:lastplace_open_folds = 0

function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()

function! SpaceOutParens()
    let l:winview = winsaveview()
    normal 0f(cs)(
    call winrestview(l:winview)
endfunction

" Append modeline, from Vim wiki:
" http://vim.wikia.com/wiki/Modeline_magic
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

let g:tex_conceal=""
let g:tex_flavor="latex"

if has("gui_vimr")
	set termguicolors
	set background=light
	colorscheme PaperColor
else
	set t_Co=256
	set background=light
	colorscheme PaperColor
endif

map <silent> <leader>qc <Plug>ReplaceWithCurly
map <silent> <leader>qs <Plug>ReplaceWithStraight
map <silent> <leader>mf <Plug>CharMacronFlip
map <silent> <leader>mo <Plug>MacronsOn
map <silent> <leader>nm <Plug>MacronsOff

let g:markdown_fenced_languages = ['html', 'python', 'lua', 'bash=sh']
let g:markdown_syntax_conceal = 0

" For vim-sandwich
nmap s <Nop>
xmap s <Nop>

let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

let g:sandwich#recipes += [
	\ {'buns': ["`", "'"], 'nesting': 1, 'input': ["l'", "l`"],
	\  'filetype': ['tex', 'plaintex'] },
	\ {'buns': ["``", "''"], 'nesting': 1, 'input': ['l"'],
	\  'filetype': ['tex', 'plaintex'], },
	\ {'buns': ["“", "”"], 'nesting': 0, 'input': ['q"']},
	\ {'buns': ["‘", "’"], 'nesting': 0, 'input': ["q'"]},
	\ {'buns': ["( ", " )"], 'nesting': 1, 'match_syntax': 1,
	\  'input': ['('] },
	\ {'buns': ["[ ", " ]"], 'nesting': 1, 'match_syntax': 1,
	\  'input': ['['] },
	\ {'buns': ["{ ", " }"], 'nesting': 1, 'match_syntax': 1,
	\  'input': ['{'] },
	\ ]

" Configure UltiSnips to easily jump backwards with shift-tab
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Configure gabrielelana/vim-markdown
" let g:markdown_include_jekyll_support = 0
" let g:markdown_enable_mappings = 0
" let g:markdown_enable_spell_checking = 0

" Have Goyo engage Limelight
autocmd vim_config User GoyoEnter Limelight
autocmd vim_config User GoyoLeave Limelight!

iab hte the
iab Hte The
iab teh the
iab Teh The
iab taht that
iab Taht That
iab tihs this
iab Tihs This
iab frist first
iab Frist First
iab FIrst First
iab FRist First
iab ahve have
iab Ahve Have

" https://github.com/jonhiggs/MacDict.vim
function! MacDict(word)
  execute ":silent !open -g dict://" . a:word
  redraw!
endfunction
map <silent> <leader>d "dyiw:call MacDict(@d)<CR>

" let g:textobj#sentence#abbreviations = [
"   \ '[ABCDIMPSUabcdegimpsv]', 'ff',
"   \ 'l[ab]', '[eRr]d', 'Ph', '[Ccp]l', '[Lli]n', '[cn]o',
"   \ '[Oe]p', '[DJMSh]r', '[MVv]s', '[CFMPScfpw]t',
"   \ 'alt', '[Ee]tc', 'div', 'es[pt]', '[Ll]td', 'min',
"   \ '[MD]rs', '[Aa]pt', '[Aa]ve?', '[Ss]tr?',
"   \ '[Aa]ssn', '[Bb]lvd', '[Dd]ept', 'incl', 'Inst', 'Prof', 'Univ',
"   \ ]

" augroup textobj_sentence
"   autocmd!
"   autocmd FileType tex call textobj#sentence#init()
" augroup END
