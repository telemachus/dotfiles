execute pathogen#infect()
execute pathogen#helptags()

syntax on
filetype plugin indent on
set bs=indent,eol,start
set history=500
set scrolloff=0             " No breathing room
set number
set mouse=		    " No mouse capture

set ruler                   " Show the cursor position all the time
set showcmd
set showmode
set ls=2                    " Always show status bar

let g:match_paren_insert_timeout=5

let g:is_posix = 1
if &shell =~# 'fish$'
    set shell=bash
endif

set wrap linebreak
set colorcolumn=78
set autoindent
set formatoptions=tcqn1
set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab
set number
set foldmarker={{{,}}}
set foldlevel=0
set foldmethod=marker

set listchars=tab:▸\ ,trail:·,eol:¬
set list

" set termencoding=utf-8
set encoding=utf-8
set laststatus=2            " Always put a status line in, even
                            " if there is only one window
set showtabline=2           " Show a tabbar on top, always

set ignorecase
set smartcase               " Only care about case if I enter capitals
set gdefault                " Subsitutions are global ('g') by default
set incsearch               " Do incremental searching
set hlsearch                " Highlight all matches in a search

let mapleader = ","
" Quickly remove highlighting
nnoremap <silent> <leader><space> :noh<cr>

" Indent pastes properly
nnoremap <silent> <leader>cp :set paste<cr>"*p`[v`]=:set nopaste<cr><esc>
nnoremap <leader>pi p`[v`]=

nnoremap <silent> <leader>sp :call SpaceOutParens()<cr>

map Q gq

set backup
set backupdir=$HOME/.nvim_backups,/tmp
set directory=/tmp,$HOME/.nvim_backups

set undofile
set undodir=$HOME/.nvim_undo,/tmp

set grepprg=ack\ --nogroup\ --column
set grepformat=%f:%l:%c:%m

set printoptions:paper:letter,header:0,syntax:n
set printfont:Consolas

set hidden
nnoremap ' `
nnoremap ` '
set title
set shortmess=atIF

set statusline=[%<%.20f][%{&fenc==''?&enc:&fenc}]%y%m%r%h
set statusline+=%=%([Line:\ %l\ Column:\ %c\ %P]%)

nnoremap <silent><leader>l :set list!<CR>
nnoremap <leader>m :.,/^-- / - d

runtime macros/matchit.vim

" From Practical Vim
"
" Use %% to get current buffer's directory for :edit, :write, :saveas and
" :find
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'
"
set wildmode=longest,list

" My header files are C, not C++
autocmd BufNewFile,BufNew,BufRead *.h setlocal filetype=c

" Git rebase bindings from
" http://www.blaulabs.de/2012/12/19/hidden-gems-in-vimruntime/
augroup vim_config
    autocmd FileType gitrebase call LoadGitrebaseBindings()
augroup END

fun! LoadGitrebaseBindings()
    nnoremap P :Pick
    nnoremap S :Squash
    nnoremap C :Cycle
endfun

autocmd BufNewFile,BufNew,BufRead *.rockspec
\   setlocal filetype=lua

let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

let g:gist_clip_command='pbcopy'
let g:gist_show_privates = 1
let g:gist_detect_filetype = 1
let g:github_user = 'telemachus'

function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()

function! SpaceOutParens()
    let l:winview = winsaveview()
    normal 0f(cs)(
    call winrestview(l:winview)
endfunction


let g:UltinipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Append modeline, from Vim wiki:
" http://vim.wikia.com/wiki/Modeline_magic
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

let g:tex_conceal=""
let g:tex_flavor="latex"

if has("gui_vimr")
	set termguicolors
	set background=light
	colorscheme PaperColor
else
	set t_Co=256
	set background=light
	colorscheme PaperColor
endif

" Settings for vim-textobj-quote
augroup textobj_quote
	autocmd!
	autocmd FileType mail call textobj#quote#init({'educate': 1})
	autocmd FileType markdown call textobj#quote#init({'educate': 1})
	autocmd FileType text call textobj#quote#init({'educate': 1})
augroup END

augroup mail_settings
	autocmd!
	autocmd FileType mail setlocal formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^[-*+]\\s\\+\\\|^\\[^\\ze[^\\]]\\+\\]:
augroup END

augroup scheme_settings
	autocmd!
	autocmd bufread,bufnewfile *.lisp,*.scm,*.rkt setlocal equalprg=scmindent.rkt
augroup END

map <silent> <leader>qc <Plug>ReplaceWithCurly
map <silent> <leader>qs <Plug>ReplaceWithStraight
map <silent> <leader>mf <Plug>CharMacronFlip
map <silent> <leader>mo <Plug>MacronsOn
map <silent> <leader>nm <Plug>MacronsOff

let g:markdown_fenced_languages = ['html', 'python', 'lua', 'bash=sh']
let g:markdown_syntax_conceal = 0

" For vim-sandwich
nmap s <Nop>
xmap s <Nop>

let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

let g:sandwich#recipes += [
	\ {'buns': ["`", "'"], 'nesting': 1, 'input': ["l'", "l`"],
	\  'filetype': ['tex', 'plaintex'] },
	\ {'buns': ["``", "''"], 'nesting': 1, 'input': ['l"'],
	\  'filetype': ['tex', 'plaintex'], },
	\ {'buns': ["“", "”"], 'nesting': 0, 'input': ['q"']},
	\ {'buns': ["‘", "’"], 'nesting': 0, 'input': ["q'"]},
	\ {'buns': ["( ", " )"], 'nesting': 1, 'match_syntax': 1,
	\  'input': ['('] },
	\ {'buns': ["[ ", " ]"], 'nesting': 1, 'match_syntax': 1,
	\  'input': ['['] },
	\ {'buns': ["{ ", " }"], 'nesting': 1, 'match_syntax': 1,
	\  'input': ['{'] },
	\ ]

" Configure UltiSnips to easily jump backwards with shift-tab
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:python_host_prog = '/usr/local/bin/python2'
let g:python3_host_prog = '/usr/local/bin/python3'

" Configure gabrielelana/vim-markdown
let g:markdown_include_jekyll_support = 0
let g:markdown_enable_mappings = 0
let g:markdown_enable_spell_checking = 0

" Have Goyo engage Limelight
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

ab hte the
ab Hte The
ab teh the
ab Teh The
ab taht that
ab Taht That
ab tihs this
ab Tihs This

