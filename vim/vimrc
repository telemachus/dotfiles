filetype off
"call pathogen#runtime_append_all_bundles()
"call pathogen#helptags()
runtime bundle/vim-unbundle/unbundle.vim

" Most general settings first
set nocompatible            " Vim rather than Vi settings; must go first
set noeb                    " Set no audio or visual error beep
set bs=indent,eol,start     " Backspace over everything in insert mode
set history=500             " Keep 50 lines of command line history
set scrolloff=3             " A little breathing room
set number                  " Always show line numbers
set tags=./tags;

" Set items for view @ bottom of windows
set ruler                   " Show the cursor position all the time
set showcmd                 " Display incomplete commands
set showmode                " Display current mode
set ls=2                    " Always show status bar

" Remove overbright matching of parentheses
let g:loaded_matchparen = 1

" Syntax basics
syntax on
filetype plugin indent on

" Do POSIX right
let g:is_posix = 1

" Text basics
"set wrap
"set linebreak
"let &showbreak = '+++ '
set textwidth=75
set colorcolumn=80
set formatoptions=tcqn1
set fo-=c
set fo-=r
set fo-=o
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab               " Use spaces for tabs
set number

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸-,trail:·,eol:¬
set list

" Editor layout {{{
set termencoding=utf-8
set encoding=utf-8
set laststatus=2            " Always put a status line in, even
                            " if there is only one window
set showtabline=2           " Show a tabbar on top, always
set cmdheight=2             " Use a status bar that is 2 rows high
" }}}

" An easier leader than \
let mapleader = ","

" Search and regex settings
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch               " Do incremental searching
set showmatch
set hlsearch                " Highlight all matches in a search
nnoremap <silent> <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

                            " Show matching brackets
set matchtime=1             " But turn it off quickly

" Don't use Ex mode, use Q for formatting
map Q gq

" Enable mouse
set mouse=a

" Use Dim for my colorscheme
set t_Co=256
colorscheme inkpot

" Make tab in v-mode indent code
vmap <tab> >gv
vmap <s-tab> <gv

" Make tab in normal mode indent code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

" Fix placement of backups and swap files
set backup
set backupdir=$HOME/.vim_backups,/tmp
set directory=/tmp,$HOME/.vim_backups

" Vim 7.3, now with persistent undo
set undofile            " Test the persistent unto feature
set undodir=$HOME/.vim_undo,/tmp

" Some Perl voodoo: insert Perl base & set filetype
imap ,perl #!/usr/bin/env perl<CR>use warnings;
    \<CR>use 5.014;<CR>use autodie;<CR><esc>:set filetype=perl<ENTER>i

" Use ack instead of grep
set grepprg=ack\ --nogroup\ --column
set grepformat=%f:%l:%c:%m

" Tell Vim to print using US-sized paper, not A4
set printoptions:paper:letter,header:0,syntax:n
set printfont:Consolas
" Easier way to get into normal mode?
imap jk <Esc>

" From http://tuxtraining.com/2008/11/11/exploring-vim-configurations
set hidden
nnoremap ' `
nnoremap ` '
set title
set scrolloff=3
nmap <silent> <leader>s :set nolist!<CR>
set shortmess=atI
nmap <silent> <leader>pa :set invpaste<CR>
imap <C-l> =><Space>

inoremap kj <Esc>
" let g:liquid_highlight_types = ["html","erb=eruby","html+erb=eruby.html"]
let g:closetag_html_style = 1
" let g:delimitMate_excluded_regions = "Comment,String"

" status line hijinks
set statusline=%<%f\ %h%m%r%y%{\"[\".(&fenc==\"\"?&enc:&fenc).\"]\"}
\%{exists('g:loaded_rbenv')?rbenv#statusline_ft_ruby():''}
\%{exists('g:loaded_perlbrew')?perlbrew#statusline_ft_perl():''}
\%{exists('g:loaded_fugitive')?fugitive#statusline():''}
\%=%-14.(%l,%c%V%)\ %P

" Modeline experiment
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
        \ &tabstop, &shiftwidth, &textwidth)
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
" Shortcut to rapidly toggle `set list`
nmap <silent><leader>l :set list!<CR>
vmap <leader>- :s/\v^(\s*)(.*)$/\1# \2/<CR>:nohl<CR>
vmap <leader>_ :s/\v^(\s*)# (.*)$/\1\2/<CR>:nohl<CR>

" Clipboard fix for OSX?
" set clipboard=unnamed

"runtime macros/matchit.vim
"
"function! ErlPretty()
"  silent !erl -noshell -eval 'erl_tidy:file("%",[verbose]).' -s erlang halt
"endfunction
"nmap ep :execute ErlPretty()
nmap <silent><F4> :w<CR>:make<CR>:cw<CR>

" Found on StackOverflow: http://xrl.us/bk3bir
fun! <SID>StripTrailingWhiteSpace()
    let l = line(".")
    let c = col(".")
    let _s = @/
    %s/\s\+$//e
    call cursor(l, c)
    let @/ = _s
endfun

autocmd BufWritePre *.js :call <SID>StripTrailingWhiteSpace()

function! s:PasteEscaped()
    echo "\\".getcmdline()."\""
    let char = getchar()
    if char == "\<esc>"
        return ''
    else
        let register_content = getreg(nr2char(char))
        let escaped_register = escape(register_content, '\'.getcmdtype())
        return substitute(escaped_register, '\n', '\\n', 'g')
    endif
endfunction

cnoremap <c-x> <c-r>=<SID>PasteEscaped()<cr>

" Some mappings from Learn Vimscript the Hard Way
noremap _ ddkP
noremap - ddp
inoremap <c-u> <esc>viwUwa
nnoremap <c-u> viwU<esc>

" Set browser for haskell_doc.vim
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s %s"

" Make sure Markdown files are properly recognized
autocmd BufNewFile,BufRead *.markdown,*.md,*.mdown,*.mkd,*.mkdn
\    setlocal filetype=markdown
