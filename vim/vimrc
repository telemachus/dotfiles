execute pathogen#infect()
execute pathogen#helptags()

" Most general settings first
syntax on                   " Syntax highlighting on
filetype plugin indent on   " Filetype detection
set bs=indent,eol,start     " Backspace over everything in insert mode
set history=500             " Keep 500 lines of command line history
set scrolloff=0             " No breathing room
set number                  " Always show line numbers

" Set items for view @ bottom of windows
set ruler                   " Show the cursor position all the time
set showcmd                 " Display incomplete commands
set showmode                " Display current mode
set ls=2                    " Always show status bar

" Control matchparen: I want it for scheme, but only there.
" autocmd FileType ruby,lua,bash,sh,perl,c,erlang,mail NoMatchParen
" autocmd FileType scheme DoMatchParen
let g:match_paren_insert_timeout=5

" Do POSIX right
let g:is_posix = 1

" Text basics
"set wrap
"set linebreak
"let &showbreak = '+++ '
set textwidth=75
set colorcolumn=78
set formatoptions=tcqn1
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set number
set foldmarker={{{,}}}
set foldlevel=0
set foldmethod=marker
autocmd Filetype ruby setlocal ts=2 sw=2 sts=2 expandtab

" Editor layout {{{
set termencoding=utf-8
set encoding=utf-8
set laststatus=2            " Always put a status line in, even
                            " if there is only one window
set showtabline=2           " Show a tabbar on top, always
" }}}

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,trail:·,eol:¬
set list

" An easier leader than \
let mapleader = ","

" Search and regex settings
set ignorecase
set smartcase
set gdefault
set incsearch               " Do incremental searching
set hlsearch                " Highlight all matches in a search
nnoremap <silent> <leader><space> :noh<cr>

" Open folds in normal mode with <space>
nnoremap <space> za

" Indent pastes properly
nnoremap <leader>pi p`[v`]=

" Don't use Ex mode, use Q for formatting
map Q gq

" Enable mouse
set mouse=a

" Use sol, a light colorscheme, in the gui and Tomorrow-Night-Bright,
" a dark colorscheme, in the terminal.
if has("gui_running")
    colorscheme sol
else
    colorscheme Tomorrow-Night-Bright
endif

" Fix placement of backups and swap files
set backup
set backupdir=$HOME/.vim_backups,/tmp
set directory=/tmp,$HOME/.vim_backups

" Vim 7.3, now with persistent undo
set undofile            " Test the persistent unto feature
set undodir=$HOME/.vim_undo,/tmp

" Use ack instead of grep
set grepprg=ack\ --nogroup\ --column
set grepformat=%f:%l:%c:%m

" Tell Vim to print using US-sized paper, not A4
set printoptions:paper:letter,header:0,syntax:n
set printfont:Consolas

" From http://tuxtraining.com/2008/11/11/exploring-vim-configurations
set hidden
nnoremap ' `
nnoremap ` '
set title
set shortmess=atI
nnoremap <silent> <leader>p :set invpaste<CR>

" A simple function to clean up the ugly business of getting the git branch
" into the status line.
function! Git_Branch()
    let b:head=''
    if exists('*fugitive#head')
        let b:head = fugitive#head(7)
    endif

    return empty(b:head) ? '' : '[' . b:head . ']'
endfunction

" My status line
set statusline=%<%.20f\ %h%m%r%y[%{&fenc==''?&enc:&fenc}]
set statusline+=%{Git_Branch()}
set statusline+=%=%([Line:\ %l\ Column:\ %c\ %P]%)

" Shortcut to rapidly toggle `set list`
nnoremap <silent><leader>l :set list!<CR>
nnoremap <leader>) )ge

runtime macros/matchit.vim

" Some tips from Practical Vim
"
"   Use %% to get current buffer's directory for :edit, :write, :saveas and
"   :find
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'
"
" Bash-style TAB expansion
set wildmode=longest,list

" Make sure Markdown files are properly recognized
autocmd BufNewFile,BufNew,BufRead *.markdown,*.md,*.mdown,*.mkd,*.mkdn
\   setlocal filetype=markdown

" Git rebase bindings from
" http://www.blaulabs.de/2012/12/19/hidden-gems-in-vimruntime/
augroup vim_config
    autocmd FileType gitrebase call LoadGitrebaseBindings()
augroup END

fun! LoadGitrebaseBindings()
    nnoremap P :Pick
    nnoremap S :Squash
    nnoremap C :Cycle
endfun

autocmd BufNewFile,BufNew,BufRead *.rockspec
\   setlocal filetype=lua

let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

let g:gist_clip_command='pbcopy'
let g:github_user = 'telemachus'

function! NeatFoldText() "{{{2
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}2
